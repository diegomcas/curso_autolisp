;Evaluación de una expresión
(- (+ (- 20 10) (* 2 2)) 4)

;Asignación de enteros
(setq un_numero 8)
(setq otro_numero 6)

;asignando el resultado de otra función
(setq resultado_suma (+ un_numero otro_numero))
!resultado_suma

;Asignando el resultado de una función que tiene funciones como parámetros
(setq resultado_div(/ (* un_numero 2)otro_numero))
!resultado_div

;Asignando strings
(setq var_string "Un texto")
!var_string

;Haciendo que tire un error
(setq MAL (+ var_string un_numero))
; error: bad argument type: numberp: "Un texto"


;Asignando un real
(setq r 2.5634)

;La división de enteros, retorna siempre un entero!!!
(setq num 25 div 2)
(setq res_div (/ num div))

;Si los dos o alguno de los parámetros son reales,
; la división retorna un real
(setq numr 25.0 div_r 0.25)
(setq res_div (/ numr div_r))

;Ejemplos de asignaciones de cadenas
(setq una_cadena "Hola mundo!!!")
(setq otra_cadena "Mi 1er. programa en esto!!!")

;Ejemplos de asignaciones de listas (con Quote ('))
(setq una_lista '(1 3.14 "Hola" ("Otra Lista" 2)))

;con la función list (list parametro parametro ...)
(setq otra_lista (list 1 3.14 "Hola"))

;La lista de par punteado (doted pair list)
(setq mas_listas (cons "hola" 2.54))
;Retorna -> ("hola" 2.54)

;Ejemplos de asignaciones de Puntos (points)
(setq pto1 '(2.5 2.5 0))
(setq pto2 '(2.5 2.5)
(setq pto3 (list (2.5 2.5 3))

;Armando la lista que representa al point a partir de variables
(setq coord_x 2.5)
(setq coord_y 2.5)
(setq coord_z 3)
(setq pto4 (list coord_x coord_y coord_z))

;Para ver la lista de la entidad (solo como ejemplo)
; más adelante las manipularemos mejor
(entget (car (entsel "Seleccione el círculo")))

;Par de listas largas para jugar con las posiciones de sus elementos
(setq list_a (list 21.3 22.5 23.5 23.8 22.6 23.0 24.5 22.5 23.5 26.5 ))
(setq list_b (list 100 108 112 118 123 128 132 139 142))

(car list_a) ;El primer elemento
(cadr list_a) ;El segundo
(caddr list_a) ;El tercero
(cadddr list_a a) ;El cuarto

(cdr list_a) ;Una lista sin el primer elemento
(cadr list_a) ;Sin el primero ni el segundo
(caddr list_a) ;y así sucesivamente
(cadddr list_a a) ;......

(cdr list_a) ;Sin el primero ni el segundo
(cddr list_a) ;Sin el primero ni el segundo
(cdddr list_a) ;y así sucesivamente

;DIBUJANDO UN RECTÁNGULO CONOCIENDO DOS PUNTOS
;Puntos conocidos
(setq pt1 (list 10 10))
(setq pt3 (list 30 20))

;Compongamos pt2 y pt4 con lo que conocemos:
(setq pt2 (list (car pt3) (cadr pt1)))
(setq pt4 (list (car pt1) (cadr pt3)))

;Dibujamos linea por linea cortando la función command para cada una
(command "_line" pt1 pt2 "")
(command "_line" pt2 pt3 "")
(command "_line" pt3 pt4 "")
(command "_line" pt4 pt1 "")

;Dibujamos todas las lineas de una (copiando la funcionalidad del comando line)
(command "_line" pt1 pt2 pt3 pt4 pt1 "")

;Dibujamos las lineas y cerramos con la opción close del comando line)
(command "_line" pt1 pt2 pt3 pt4 "c")

;DIBUJAMOS UN RECTÁNGULO PERO CONOCIENDO OTROS DATOS
;Datos Conocidos
(setq pt1 (list 10 10))
(setq ancho 100)
(setq alto 50)

;Compongamos y calculemos las coordenadas de los otros puntos
(setq pt2 (list (+ ancho (car pt1)) (cadr pt1)))
(setq pt3 (list (+ ancho (car pt1)) (+ alto (cadr pt1))))
(setq pt4 (list (car pt1) (+ alto (cadr pt1))))
